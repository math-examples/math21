#include <math21_kernels.h>

// C = k1*A*B + k2*C
MATH21_KERNEL_TEMPLATE_HEADER_1(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_SUFFIX_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_nn_naive, NumReal)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(i, k, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(k, j, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A*B.t + k2*C
MATH21_KERNEL_TEMPLATE_HEADER_1(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_SUFFIX_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_nt_naive, NumReal)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(i, k, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(j, k, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A.t*B + k2*C
MATH21_KERNEL_TEMPLATE_HEADER_1(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_SUFFIX_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_tn_naive, NumReal)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(k, i, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(k, j, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}

// C = k1*A.t*B.t + k2*C
MATH21_KERNEL_TEMPLATE_HEADER_1(NumReal)
MATH21_KERNEL_EXPORT void MATH21_MAKE_KERNEL_NAME_SUFFIX_1(math21_template_matrix_multiply_onto_k1AB_add_k2C_similar_tt_naive, NumReal)(
        NumN size, NumN nr_C, NumN nc_C, NumN n_common, NumReal k1,
        MATH21_KERNEL_GLOBAL const NumReal *A, NumN stride_a,
        MATH21_KERNEL_GLOBAL const NumReal *B, NumN stride_b,
        NumReal k2,
        MATH21_KERNEL_GLOBAL NumReal *C, NumN stride_c MATH21_KERNEL_INPUT_ID) {
    MATH21_KERNEL_GET_ID();
#if defined(MATH21_IS_FROM_OPENCL)
    A -= 1;
    B -= 1;
    C -= 1;
#endif
    if (id > size) return;
    NumN i, j, ia, ib, ic;
    math21_device_index_1d_to_2d_fast(&i, &j, id, nc_C);
    NumN k;
    NumReal sum = 0;
    for (k = 1; k <= n_common; ++k) {
        math21_device_index_2d_to_1d_fast(k, i, &ia, stride_a);
        math21_device_index_2d_to_1d_fast(j, k, &ib, stride_b);
        sum += A[ia] * B[ib];
    }
    math21_device_index_2d_to_1d_fast(i, j, &ic, stride_c);
    C[ic] = k1 * sum + k2 * C[ic];
}