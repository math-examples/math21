/* Copyright 2015 The math21 Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// Do not edit.
// file generated by replacing "_cpu(" in cpu file to "_opencl(".
// (const NumN *) -> ""
// (const NumR *) -> ""
// (const NumN8 *) -> ""
// (const NumR32 *) -> ""
// (const NumR64 *) -> ""
// (NumN *) -> ""
// (NumR *) -> ""
// (NumN8 *) -> ""
// (NumR32 *) -> ""
// (NumR64 *) -> ""
// "const void *" -> "PtrVoidInWrapper "
// "void *" -> "PtrVoidWrapper "
// "const NumN *" -> "PtrNInWrapper "
// if type == m21_type_NumN, then "_opencl" -> "_opencl<NumN>"
// if type == m21_type_NumR, then "_opencl" -> "_opencl<NumR>"
// if type == m21_type_NumN8, then "_opencl" -> "_opencl<NumN8>"
// if type == m21_type_NumR32, then "_opencl" -> "_opencl<NumR32>"
// if type == m21_type_NumR64, then "_opencl" -> "_opencl<NumR64>"
// if type1 == m21_type_NumN8, type2 == m21_type_NumR, then "_opencl" -> "_opencl<NumN8, NumR>"

#include "template_opencl_01.h"
#include "op_opencl.h"

#ifdef MATH21_FLAG_USE_OPENCL

using namespace math21;

void math21_generic_vector_kx_opencl(NumN n, NumR k, PtrVoidWrapper x, NumN stride_x, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_kx_opencl<NumR>(n, (NumR) k, x, stride_x);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_kx_opencl<NumR32>(n, (NumR32) k, x, stride_x);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_kx_opencl<NumR64>(n, (NumR64) k, x, stride_x);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_kx_add_y_opencl(NumN n, NumR k, PtrVoidInWrapper x, NumN stride_x,
                                           PtrVoidWrapper y, NumN stride_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_kx_add_y_opencl<NumR>(n, (NumR) k, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_kx_add_y_opencl<NumR32>(n, (NumR32) k, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_kx_add_y_opencl<NumR64>(n, (NumR64) k, x, stride_x, y, stride_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_xy_opencl(NumN n, PtrVoidInWrapper x, NumN stride_x,
                                     PtrVoidWrapper y, NumN stride_y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_xy_opencl<NumR>(n, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_xy_opencl<NumR32>(n, x, stride_x, y, stride_y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_xy_opencl<NumR64>(n, x, stride_x, y, stride_y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_sin_opencl(NumN n, PtrVoidInWrapper x, PtrVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_sin_opencl<NumR>(n, x, y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_sin_opencl<NumR32>(n, x, y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_sin_opencl<NumR64>(n, x, y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_cos_opencl(NumN n, PtrVoidInWrapper x, PtrVoidWrapper y, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_cos_opencl<NumR>(n, x, y);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_cos_opencl<NumR32>(n, x, y);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_cos_opencl<NumR64>(n, x, y);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_tensor_3d_swap_row_in_d2_opencl(
        NumN n, PtrVoidWrapper x, NumN i, NumN j, NumN d1, NumN d2, NumN d3, NumN type) {
    if (type == m21_type_NumN) {
        math21_template_tensor_3d_swap_row_in_d2_opencl<NumN>(n, x, i, j, d1, d2, d3);
    } else if (type == m21_type_NumR) {
        math21_template_tensor_3d_swap_row_in_d2_opencl<NumR>(n, x, i, j, d1, d2, d3);
    } else if (type == m21_type_NumR32) {
        math21_template_tensor_3d_swap_row_in_d2_opencl<NumR32>(n, x, i, j, d1, d2, d3);
    } else if (type == m21_type_NumR64) {
        math21_template_tensor_3d_swap_row_in_d2_opencl<NumR64>(n, x, i, j, d1, d2, d3);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_addToC_opencl(NumN n, PtrVoidInWrapper A, PtrVoidInWrapper B, PtrVoidWrapper C, NumN type) {
    if (type == m21_type_NumN) {
        math21_template_vector_addToC_opencl<NumN>(n, A, B, C);
    } else if (type == m21_type_NumR) {
        math21_template_vector_addToC_opencl<NumR>(n, A, B, C);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_addToC_opencl<NumR32>(n, A, B, C);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_addToC_opencl<NumR64>(n, A, B, C);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_vector_mulToC_opencl(NumN n, PtrVoidInWrapper A, PtrVoidInWrapper B, PtrVoidWrapper C, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_mulToC_opencl<NumR>(n, A, B, C);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_mulToC_opencl<NumR32>(n, A, B, C);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_mulToC_opencl<NumR64>(n, A, B, C);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_broadcast_in_dn_opencl(NumN n, PtrVoidInWrapper x, PtrVoidWrapper y,
                                           NumN dims_x, PtrNInWrapper dx,
                                           NumN dims_y, PtrNInWrapper dy,
                                           NumN type) {
    if (type == m21_type_NumR) {
        math21_template_vector_broadcast_in_dn_opencl<NumR>(n, x, y, dims_x, dx, dims_y, dy);
    } else if (type == m21_type_NumR32) {
        math21_template_vector_broadcast_in_dn_opencl<NumR32>(n, x, y, dims_x, dx, dims_y, dy);
    } else if (type == m21_type_NumR64) {
        math21_template_vector_broadcast_in_dn_opencl<NumR64>(n, x, y, dims_x, dx, dims_y, dy);
    } else {
        math21_tool_assert(0);
    }
}

void math21_generic_optimization_adam_update_part_2_opencl(
        NumN x_size, PtrVoidWrapper x, PtrVoidInWrapper m, PtrVoidInWrapper v,
        NumR beta1, NumR beta2, NumR alpha, NumR eps, NumN t, NumN type) {
    if (type == m21_type_NumR) {
        math21_template_optimization_adam_update_part_2_opencl<NumR>(
                x_size, x, m, v, (NumR) beta1, (NumR) beta2,
                (NumR) alpha, (NumR) eps, t);
    } else if (type == m21_type_NumR32) {
        math21_template_optimization_adam_update_part_2_opencl<NumR32>(
                x_size, x, m, v, (NumR32) beta1, (NumR32) beta2,
                (NumR32) alpha, (NumR32) eps, t);
    } else if (type == m21_type_NumR64) {
        math21_template_optimization_adam_update_part_2_opencl<NumR64>(
                x_size, x, m, v, (NumR64) beta1, (NumR64) beta2,
                (NumR64) alpha, (NumR64) eps, t);
    } else {
        math21_tool_assert(0);
    }
}

#endif